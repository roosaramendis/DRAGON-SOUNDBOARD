# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'voice mode.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from logging import exception
from time import time
from PyQt5 import QtCore, QtGui, QtWidgets
import os
from PyQt5.QtCore import QSettings
import pathlib
import sounddevice as sd
import pyaudio
import audio
import re
import pickle
import globle_key_listener
import mic_to_output
import time
from PyQt5.QtCore import QFile, QTextStream


global mydir
mydir = os.path.dirname(os.path.realpath(__file__))
global audiofiledir
audiofiledir = [""]
global userpath
userpath =os.path.expanduser('~')
global selectedaudios
selectedaudios = []
global deviceslistin
deviceslistin =[]
global deviceslistout
deviceslistout =[]
global deviceslist
deviceslist =[]
global hotkeydict
hotkeydict ={}
global selectedoutputdevicetext
selectedoutputdevicetext = ['']
global selectedinputdevicetext
selectedinputdevicetext = ['']
global modifirekeyslist
modifirekeyslist = ['Key.alt_l','Key.alt_gr']
global isaudioplaying
isaudioplaying = [False]
global hearituselfcalledtimes
hearituselfcalledtimes = [0]
global stopstreaminmicintoout
stopstreaminmicintoout  = [False]
global overridehearuselfdevice
overridehearuselfdevice = [0]
global hearmyselfdevice
hearmyselfdevice = ['']
global hearmyselfvolume
hearmyselfvolume = [1]
global overridesoundboardvolume
overridesoundboardvolume = [0]
global soundboardvolume
soundboardvolume = [1]
global pitchvolume
pitchvolume = [1]
global pitch
pitch = [1]
global pitchshift
pitchshift = [0]
global capturehkcalltimes
capturehkcalltimes = [0]
global keyboardlistenerto_stopaudiocalledtimes
keyboardlistenerto_stopaudiocalledtimes = [0]



def setisaudioplaying(isplaying):
    isaudioplaying.clear()
    isaudioplaying.append(isplaying)
    print(str(isaudioplaying[0])+" here")

def getstopstreaminmicintoout():
    print(stopstreaminmicintoout[0])
    return stopstreaminmicintoout[0]

class TableModel(QtCore.QAbstractTableModel):
    
    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data

    def data(self, index, role):
        if role == QtCore.Qt.DisplayRole:
            
            return self.datalist[index.row()][index.column()]

    def rowCount(self, index):
        try:
            self.keylist =[]
            self.vallist = []
            self.datalist = []
            for i in self._data.keys():
                self.keylist.append(i)
                self.vallist.append(self._data.get(i))
                dl = (str(self._data.get(i)),str(i))
                self.datalist.append(dl)
            return len(self.datalist)
        except:
            pass
    def columnCount(self, index):
        try:
            return len(self.datalist[0])
        except:
            pass    

class capturehk_thread(QtCore.QThread):
    capturedhk = QtCore.pyqtSignal(str)
    def __init__(self, parent=None):
        super(capturehk_thread,self).__init__(parent)
    def run(self):
        self.settingval = QSettings("Dragon Voide Mode","settings vals")
        
           
        while True:
            time.sleep(0.2)
            capturehkcalltimes[0] += 1
            if capturehkcalltimes[0] <2:
                globle_key_listener.startcapture_hk_call()
            else:    
                self.capturedhk.emit(self.settingval.value("temphkey"))
            #cpturedkeylist = globle_key_listener.starcapture_hk()
            
class keyboardlistenerto_stopaudio_thread(QtCore.QThread):
    
    def __init__(self,parent=None):
        super(keyboardlistenerto_stopaudio_thread,self).__init__(parent)

    def run(self):
        
        while True:
            time.sleep(0.5)
            #print(str(audio.playaudio_class().getisaudioplaying())+" in while")
            if audio.playaudio_class().getisaudioplaying() == True:
                keyboardlistenerto_stopaudiocalledtimes[0] += 1
                print("waiting for stop key") 
                if keyboardlistenerto_stopaudiocalledtimes[0] <2: 
                    try:
                        globle_key_listener.starlistenerforstopaudio_call()
                    except:
                        print("print err") 
            else:            
                keyboardlistenerto_stopaudiocalledtimes[0] = 0
                #print(str(hearituselfcalledtimes[0])+"hearituself called times")
                '''stopstreaminmicintoout[0] = True
                mic_to_output.stopmictoinput()'''
                #self.suicidefunc.emit("terminate")

class playaudio_thread(QtCore.QThread):
    
    def __init__(self,selecetedfilepath,deviceindex, parent=None):
        super(playaudio_thread,self).__init__(parent)
        self.selecetedfilepath = selecetedfilepath
        self.deviceindex = deviceindex
    def run(self):
        if overridesoundboardvolume[0] == 2:
            audio.playaudio_class().playaudio(self.selecetedfilepath,self.deviceindex,1024,soundboardvolume[0]/100)    
        if overridesoundboardvolume[0] == 0:
            audio.playaudio_class().playaudio(self.selecetedfilepath,self.deviceindex,1024)
            
class hearituself_thread(QtCore.QThread):
    suicidefunc = QtCore.pyqtSignal(str)
    def __init__(self,selectedinputdevice,selectedoutputdevice,volume, parent=None):
        super(hearituself_thread,self).__init__(parent)
        self.selectedinputd = selectedinputdevice
        self.selectedoutputd =selectedoutputdevice
        self.volume =volume
    def run(self):
        
        while True:
            time.sleep(0.5)
            #print(str(audio.getisaudioplaying())+" in while")
            if audio.playaudio_class().getisaudioplaying() == True:
                hearituselfcalledtimes[0] += 1
                print("hearit u self started") 
                if hearituselfcalledtimes[0] <2: 
                    try:
                        mic_to_output.startmictooutputcall(self.selectedinputd,self.selectedoutputd,self.volume/100)
                    except:
                        print("print err") 
            else:            
                hearituselfcalledtimes[0] = 0
                #print(str(hearituselfcalledtimes[0])+"hearituself called times")
                stopstreaminmicintoout[0] = True
                mic_to_output.stopmictoinput()
                #self.suicidefunc.emit("terminate")
class mictoout_thread(QtCore.QThread):
    
    def __init__(self,selectedinputdevice,selectedoutputdevice, parent=None):
        super(mictoout_thread,self).__init__(parent)
        self.selectedinputd = selectedinputdevice
        self.selectedoutputd =selectedoutputdevice
    def run(self):
        try:
            mic_to_output.startmictooutput(self.selectedinputd,self.selectedoutputd)
        except:
            print("print err")    

class gblkeylistener_thread(QtCore.QThread):
    
    def __init__(self, parent=None):
        super(gblkeylistener_thread,self).__init__(parent)
    def run(self):
        try:
            globle_key_listener.starlistener(hotkeydict,deviceslist.index(selectedoutputdevicetext[0]),soundboardvolume[0]/100)
        except:
            pass

class Ui_voicemode(object):
    def setupUi(self, voicemode):
        voicemode.setObjectName("voicemode")
        voicemode.resize(642, 540)
        self.makesettingvals()        
        self.setdefsettingvals()
        self.getsettingvals()
        print(selectedoutputdevicetext[0])
        try:
            datainfile = pickle.load(open(mydir+"/"+"saves/hotkeys.dvm","rb")) #read data in file
            print(datainfile)
            hotkeydictinfile = datainfile
            hotkeydict.update(hotkeydictinfile)
            print(hotkeydict)
        except:
            pass
        self.centralwidget = QtWidgets.QWidget(voicemode)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 651, 461))
        self.tabWidget.setObjectName("tabWidget")
        self.soundboard = QtWidgets.QWidget()
        self.soundboard.setObjectName("soundboard")
        self.asinghk = QtWidgets.QPushButton(self.soundboard)
        self.asinghk.setGeometry(QtCore.QRect(10, 10, 121, 41))
        self.asinghk.setObjectName("asinghk")
        self.asinghk.clicked.connect(self.asinghk_clk)
        self.hotkeylb = QtWidgets.QLabel(self.soundboard)
        self.hotkeylb.setObjectName(u"hotkeylb")
        self.hotkeylb.setGeometry(QtCore.QRect(10, 220, 121, 21))
        self.showhotkey = QtWidgets.QPushButton(self.soundboard)
        self.showhotkey.setObjectName(u"showhotkey")
        self.showhotkey.setGeometry(QtCore.QRect(10, 250, 121, 23))
        self.showhotkey.clicked.connect(self.whenchekedlistitem)
        '''self.comboBox = QtWidgets.QComboBox(self.soundboard)
        self.comboBox.setGeometry(QtCore.QRect(10, 60, 51, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")'''
        '''self.lineEdit = QtWidgets.QLineEdit(self.soundboard)
        self.lineEdit.setGeometry(QtCore.QRect(90, 60, 41, 21))
        self.lineEdit.setObjectName("lineEdit")'''
        '''self.label = QtWidgets.QLabel(self.soundboard)
        self.label.setGeometry(QtCore.QRect(70, 60, 16, 21))
        self.label.setObjectName("label")'''
        self.removehk = QtWidgets.QPushButton(self.soundboard)
        self.removehk.setGeometry(QtCore.QRect(10, 110, 121, 41))
        self.removehk.setObjectName("removehk")
        self.removehk.clicked.connect(self.removehotkey_clk)
        '''self.repeat = QtWidgets.QCheckBox(self.soundboard)
        self.repeat.setGeometry(QtCore.QRect(10, 140, 101, 17))
        self.repeat.setObjectName("repeat")'''
        self.tabWidget_2 = QtWidgets.QTabWidget(self.soundboard)
        self.tabWidget_2.setObjectName(u"tabWidget_2")
        self.tabWidget_2.setGeometry(QtCore.QRect(150, 10, 481, 431))
        self.audiofileview_tb = QtWidgets.QWidget()
        self.audiofileview_tb.setObjectName(u"audiofileview_tb")
        self.listView = QtWidgets.QListView(self.audiofileview_tb)
        self.listView.setGeometry(QtCore.QRect(20, 40, 451, 351))
        self.listView.setObjectName("listView")
        self.searchinaudiofiles_le = QtWidgets.QLineEdit(self.audiofileview_tb)
        self.searchinaudiofiles_le.setObjectName(u"searchinaudiofiles_le")
        self.searchinaudiofiles_le.setGeometry(QtCore.QRect(20, 10, 331, 20))
        self.searchinaudiofiles_lb = QtWidgets.QLabel(self.audiofileview_tb)
        self.searchinaudiofiles_lb.setObjectName(u"searchinaudiofiles_lb")
        self.searchinaudiofiles_lb.setGeometry(QtCore.QRect(370, 10, 91, 21))
        self.searchinaudiofiles_le.textChanged.connect(self.filteraudiofiles_func)
        self.tabWidget_2.addTab(self.audiofileview_tb, "")
        self.startcapturekeys_sb_bt = QtWidgets.QPushButton(self.soundboard)
        self.startcapturekeys_sb_bt.setObjectName(u"startcapturekeys_sb_bt")
        self.startcapturekeys_sb_bt.setGeometry(QtCore.QRect(10, 80, 121, 23))
        self.startcapturekeys_sb_bt.clicked.connect(self.startcapturekeys_sb_bt_clk)
        self.capturekey_sb_lb = QtWidgets.QLabel(self.soundboard)
        self.capturekey_sb_lb.setObjectName(u"capturekey_sb_lb")
        self.capturekey_sb_lb.setGeometry(QtCore.QRect(10, 55, 121, 23))
        self.tabWidget.addTab(self.soundboard, "")
        self.hotkeysview_tb = QtWidgets.QWidget()
        self.hotkeysview_tb.setObjectName(u"hotkeysview_tb")
        self.tableView = QtWidgets.QTableView(self.hotkeysview_tb)
        self.tableView.setObjectName(u"tableView")
        self.tableView.setGeometry(QtCore.QRect(10, 10, 461, 381))
        self.tabWidget_2.addTab(self.hotkeysview_tb, "")
        self.refreshlist = QtWidgets.QPushButton(self.soundboard)
        self.refreshlist.setObjectName(u"refreshlist")
        self.refreshlist.setGeometry(QtCore.QRect(10, 160, 121, 23))
        self.refreshlist.clicked.connect(self.refreshlistfunc)
        self.tabWidget.addTab(self.soundboard, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        # -------------voice changer ui ----------------------------------------------------
        self.voicechanger_tb = QtWidgets.QWidget()
        self.voicechanger_tb.setObjectName(u"voicechanger_tb")
        self.voicechangerlist = QtWidgets.QListWidget(self.voicechanger_tb)
        __qlistwidgetitem = QtWidgets.QListWidgetItem(self.voicechangerlist)
        __qlistwidgetitem.setCheckState(QtCore.Qt.Checked);
        __qlistwidgetitem.setFlags(QtCore.Qt.ItemIsSelectable|QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled);
        self.voicechangerlist.setObjectName(u"voicechangerlist")
        self.voicechangerlist.setGeometry(QtCore.QRect(10, 10, 181, 381))
        self.selectionmodel = self.voicechangerlist.selectionModel()
        self.selectionmodel.selectionChanged.connect(self.showpitchchangersettings)
        #self.voicechangerlist.selectionChanged.connect(self.showpitchchangersettings)
        self.voicechangersettingarea = QtWidgets.QScrollArea(self.voicechanger_tb)
        self.voicechangersettingarea.setObjectName(u"voicechangersettingarea")
        self.voicechangersettingarea.setGeometry(QtCore.QRect(210, 10, 411, 411))
        self.voicechangersettingarea.setWidgetResizable(True)
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setObjectName(u"scrollAreaWidgetContents")
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 409, 409))
        self.voicechangersettingarea.setWidget(self.scrollAreaWidgetContents)
        self.note = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.note.setObjectName(u"note")
        self.note.setGeometry(QtCore.QRect(20, 10, 371, 51))
        self.note.hide()
        self.pitchval_hs = QtWidgets.QSlider(self.scrollAreaWidgetContents)
        self.pitchval_hs.setObjectName(u"pitchval_hs")
        self.pitchval_hs.setGeometry(QtCore.QRect(20, 100, 361, 22))
        self.pitchval_hs.setOrientation(QtCore.Qt.Horizontal)
        self.pitchval_hs.setMaximum(500)
        self.pitchval_hs.hide()
        self.pitchval = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.pitchval.setObjectName(u"pitchval")
        self.pitchval.setGeometry(QtCore.QRect(20, 80, 71, 16))
        self.pitchval.hide()
        self.pitch_volume = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.pitch_volume.setObjectName(u"pitch_volume")
        self.pitch_volume.setGeometry(QtCore.QRect(20, 130, 47, 13))
        self.pitch_volume.hide()
        self.pitch_volume_hs = QtWidgets.QSlider(self.scrollAreaWidgetContents)
        self.pitch_volume_hs.setObjectName(u"pitch_volume_hs")
        self.pitch_volume_hs.setGeometry(QtCore.QRect(20, 150, 361, 22))
        self.pitch_volume_hs.setOrientation(QtCore.Qt.Horizontal)
        self.pitch_volume_hs.setMaximum(200)
        self.pitch_volume_hs.hide()
        self.applyvoicechanger = QtWidgets.QPushButton(self.voicechanger_tb)
        self.applyvoicechanger.setObjectName(u"applyvoicechanger")
        self.applyvoicechanger.setGeometry(QtCore.QRect(10, 400, 181, 23))
        self.applyvoicechanger.clicked.connect(self.applyvoicechanger_clk)
        #self.showpitchchangersettings()
        self.tabWidget.addTab(self.voicechanger_tb, "")

        #-----------------------------------------------------------------------------------------

        self.horizontalSlider = QtWidgets.QSlider(self.tab_2)
        self.horizontalSlider.setGeometry(QtCore.QRect(10, 30, 451, 22))
        self.horizontalSlider.setMaximum(200)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.sampelrate = QtWidgets.QLabel(self.tab_2)
        self.sampelrate.setGeometry(QtCore.QRect(10, 0, 151, 21))
        self.sampelrate.setObjectName("sampelrate")
        self.tabWidget.addTab(self.tab_2, "")
        voicemode.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(voicemode)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 642, 21))
        self.menubar.setObjectName("menubar")
        self.about = QtWidgets.QMenu(self.menubar)
        self.about.setObjectName("about")
        voicemode.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(voicemode)
        self.statusbar.setObjectName("statusbar")
        voicemode.setStatusBar(self.statusbar)
        self.menubar.addAction(self.about.menuAction())
        self.label_2 = QtWidgets.QLabel(self.tab_2)
        self.label_2.setObjectName(u"label_2")
        self.label_2.setGeometry(QtCore.QRect(10, 70, 451, 21))
        self.label_2.setText(audiofiledir[0])
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName(u"label_3")
        self.label_3.setGeometry(QtCore.QRect(10, 460, 311, 41))
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName(u"label_4")
        self.label_4.setGeometry(QtCore.QRect(326, 460, 311, 41))
        self.openaudiopath = QtWidgets.QPushButton(self.tab_2)
        self.openaudiopath.setObjectName(u"openaudiopath")
        self.openaudiopath.setGeometry(QtCore.QRect(490, 70, 121, 23))
        self.openaudiopath.clicked.connect(self.getaudiofiledir)
        self.inputdevice = QtWidgets.QComboBox(self.centralwidget)
        self.inputdevice.setObjectName(u"inputdevice")
        self.inputdevice.setGeometry(QtCore.QRect(50, 470, 261, 22))
        self.outputdevice = QtWidgets.QComboBox(self.centralwidget)
        self.outputdevice.setObjectName(u"outputdevice")
        self.outputdevice.setGeometry(QtCore.QRect(370, 470, 261, 22))
        self.label_5 = QtWidgets.QLabel(self.tab_2)
        self.label_5.setObjectName(u"label_5")
        self.label_5.setGeometry(QtCore.QRect(14, 135, 601, 31))
        self.hearmyselfdevice = QtWidgets.QComboBox(self.tab_2)
        self.hearmyselfdevice.setObjectName(u"hearmyselfdevice")
        self.hearmyselfdevice.setGeometry(QtCore.QRect(290, 140, 321, 22))
        self.overridehearuselfdevice = QtWidgets.QCheckBox(self.tab_2)
        self.overridehearuselfdevice.setObjectName(u"overridehearuselfdevice")
        self.overridehearuselfdevice.setGeometry(QtCore.QRect(10, 110, 191, 17))
        self.overridesoudboardvolume = QtWidgets.QCheckBox(self.tab_2)
        self.overridesoudboardvolume.setObjectName(u"overridesoudboardvolume")
        self.overridesoudboardvolume.setGeometry(QtCore.QRect(10, 190, 191, 17))
        self.soundboardvolumeslider = QtWidgets.QSlider(self.tab_2)
        self.soundboardvolumeslider.setObjectName(u"soundboardvolumeslider")
        self.soundboardvolumeslider.setGeometry(QtCore.QRect(10, 220, 451, 22))
        self.soundboardvolumeslider.setMaximum(100)
        self.soundboardvolumeslider.setOrientation(QtCore.Qt.Horizontal)
        self.sethotkeytostop_lb = QtWidgets.QLabel(self.tab_2)
        self.sethotkeytostop_lb.setObjectName(u"sethotkeytostop_lb")
        self.sethotkeytostop_lb.setGeometry(QtCore.QRect(10, 270, 151, 21))
        self.startcapture_hk_bt = QtWidgets.QPushButton(self.tab_2)
        self.startcapture_hk_bt.setObjectName(u"startcapture_hk_bt")
        self.startcapture_hk_bt.setGeometry(QtCore.QRect(210, 270, 151, 23))
        self.startcapture_hk_bt.clicked.connect(self.startcapture_hk_bt_clk)   
        self.play = QtWidgets.QPushButton(self.soundboard)
        self.play.setObjectName(u"play")
        self.play.setGeometry(QtCore.QRect(10, 190, 41, 23))
        self.play.clicked.connect(self.play_clk)
        self.stop = QtWidgets.QPushButton(self.soundboard)
        self.stop.setObjectName(u"stop")
        self.stop.setGeometry(QtCore.QRect(90, 190, 41, 23))
        self.stop.clicked.connect(self.stop_clk)
        print(audiofiledir[0])
        self.getaudiolist()
        self.getaudiodevices()
        if len(hotkeydict.keys()) != 0:
            self.settableview(hotkeydict)
        
        try:
            print(selectedoutputdevicetext[0])
            self.outputdevice.setCurrentText(selectedoutputdevicetext[0])
        except:
            pass
        self.outputdevice.currentTextChanged.connect(self.setdeviceindexfunc)
        try:
            print(selectedinputdevicetext[0])
            self.inputdevice.setCurrentText(selectedinputdevicetext[0])
        except:
            pass
        try:
            if overridehearuselfdevice[0] == 0:
                self.overridehearuselfdevice.setChecked(False)
            elif overridehearuselfdevice[0] == 2:
                self.overridehearuselfdevice.setChecked(True)
        except:
            pass
        self.overridehearuselfdevice.stateChanged.connect(self.setoverridehearuselfval)        
        try:
            self.hearmyselfdevice.setCurrentText(hearmyselfdevice[0])
        except:
            pass
        try:
            self.horizontalSlider.setValue(hearmyselfvolume[0])
        except:
            pass
        try:
            if overridesoundboardvolume[0] == 0:
                self.overridesoudboardvolume.setChecked(False)
            elif overridesoundboardvolume[0] == 2:
                self.overridesoudboardvolume.setChecked(True)
        except:
            pass
        try:
            self.soundboardvolumeslider.setValue(soundboardvolume[0])
        except:
            pass   
        try:
            self.pitch_volume_hs.setValue(pitchvolume[0])
            self.pitch_volume.setText("Pitch volume "+ str(pitchvolume[0]))
        except:
            pass
        try:
            self.pitchval_hs.setValue(pitchvolume[0])
            self.pitchval.setText("Pitch "+ str(pitch[0]))
        except:
            pass
        try:
            if pitchshift[0] == 0:
                self.setlistwidgtitemcheckstate("Pitch Shift",False)
            elif pitchshift[0] == 2:
                self.setlistwidgtitemcheckstate("Pitch Shift",True)
        except:
            pass

        self.overridesoudboardvolume.stateChanged.connect(self.setoverridesoudboarvolumedval)
        self.soundboardvolumeslider.valueChanged.connect(self.setsoundboardvolumeval)
        self.horizontalSlider.valueChanged.connect(self.sethearmyselfvolumeval)
        self.pitchval_hs.valueChanged.connect(self.setpitchval)
        self.pitch_volume_hs.valueChanged.connect(self.setpitchvolumeval)
        self.sampelrate.setText('hear my self volume '+str(self.horizontalSlider.value()))    
        self.hearmyselfdevice.currentTextChanged.connect(self.sethearmyselfdeviceval)   
        self.inputdevice.currentTextChanged.connect(self.setindeviceindexfunc)  
        self.retranslateUi(voicemode)
        self.tabWidget.setCurrentIndex(0)
        self.hotkeylistenercall()
        self.mictooutputcall()
        self.hearituself()
        self.keyboardlistenerto_stopaudio_call()
        QtCore.QMetaObject.connectSlotsByName(voicemode)


    def keyboardlistenerto_stopaudio_call(self):
        self.thread6 = keyboardlistenerto_stopaudio_thread()
        self.thread6.start()

    def hearituself(self):
        if overridehearuselfdevice[0] == 2:
            self.thread3 = hearituself_thread(selectedinputdevice=deviceslist.index(sd.query_devices(kind='input')['name']),selectedoutputdevice=deviceslist.index(hearmyselfdevice[0]),volume=self.horizontalSlider.value())
        if overridehearuselfdevice[0] == 0:
            self.thread3 = hearituself_thread(selectedinputdevice=deviceslist.index(sd.query_devices(kind='input')['name']),selectedoutputdevice=deviceslist.index(sd.query_devices(kind='output')['name']),volume=self.horizontalSlider.value())    
        
        self.thread3.start()
        self.thread3.suicidefunc.connect(self.stophearituself)

    def stophearituself(self,msg):
        print(msg)
        self.thread3.setTerminationEnabled(True)
        self.thread3.terminate()

    def mictooutputcall(self):
        try:
            self.thread2 = mictoout_thread(selectedinputdevice=deviceslist.index(selectedinputdevicetext[0]),selectedoutputdevice=deviceslist.index(selectedoutputdevicetext[0]))
            self.thread2.start()
        except:
            pass

    def hotkeylistenercall(self):
        self.thread1 = gblkeylistener_thread()
        self.thread1.start()

    def makesettingvals(self):
        self.settingval = QSettings("Dragon Voide Mode","settings vals")

    def setdefsettingvals(self):
        settingkeylist = self.settingval.allKeys()
        #print(str(len(settingkeylist)))
        if(settingkeylist == None):
            print("making regedit")
            self.settingval.setValue("audio path",userpath+"/Music")
            self.settingval.setValue("selectedoutputdevicetext",0)
            self.settingval.setValue("selectedinputdevicetext",0)
            self.settingval.setValue("overridehearuselfdevice",0)
            self.settingval.setValue("hearmyselfdevice",0)
            self.settingval.setValue("hearmyselfvolume",100)
            self.settingval.setValue("overridesoundboardvolume",0)
            self.settingval.setValue("soundboardvolume",100)
            self.settingval.setValue("pitchvolume",100)
            self.settingval.setValue("pitch",100)
            self.settingval.setValue("pitchshift",0)

        elif len(settingkeylist)==0:
            print("set def val")
            self.settingval.setValue("audio path",userpath+"/Music")
            self.settingval.setValue("selectedoutputdevicetext",0)
            self.settingval.setValue("selectedinputdevicetext",0)
            self.settingval.setValue("overridehearuselfdevice",0)
            self.settingval.setValue("hearmyselfdevice",0)
            self.settingval.setValue("hearmyselfvolume",100)
            self.settingval.setValue("overridesoundboardvolume",0)
            self.settingval.setValue("soundboardvolume",100)
            self.settingval.setValue("pitchvolume",100)
            self.settingval.setValue("pitch",100)
            self.settingval.setValue("pitchshift",0)

    def getsettingvals(self):
        self.settingval = QSettings("Dragon Voide Mode","settings vals")
        audiofiledir[0] = str(self.settingval.value("audio path"))
        selectedoutputdevicetext[0] = self.settingval.value("selectedoutputdevicetext")
        selectedinputdevicetext[0] = self.settingval.value("selectedinputdevicetext")
        overridehearuselfdevice[0] = self.settingval.value("overridehearuselfdevice")
        hearmyselfdevice[0] = self.settingval.value("hearmyselfdevice")
        hearmyselfvolume[0] = self.settingval.value("hearmyselfvolume")
        overridesoundboardvolume[0] = self.settingval.value("overridesoundboardvolume")
        soundboardvolume[0] = self.settingval.value("soundboardvolume")
        pitchvolume[0] = self.settingval.value("pitchvolume")
        pitch[0] = self.settingval.value("pitch")
        pitchshift[0] = self.settingval.value("pitchshift")

    def setsettingvals(self):
        self.settingval = QSettings("Dragon Voide Mode","settings vals")
        self.settingval.setValue("selectedoutputdevicetext",selectedoutputdevicetext[0])
        self.settingval.setValue("selectedinputdevicetext",selectedinputdevicetext[0])

    def getaudiofiledir(self):
        audiofiledir[0] = QtWidgets.QFileDialog.getExistingDirectory(None, 'audio folder path',mydir)
        self.label_2.setText(audiofiledir[0])
        self.settingval.setValue("audio path",audiofiledir[0])

    def getaudiolist(self):
        list_of_files = []
        list_of_Afiles = []
        for root, dirs, files in os.walk(audiofiledir[0]):
            for file in files:
                list_of_files.append(os.path.join(root,file))

        for i in list_of_files:
            file_extension = pathlib.Path(i).suffix
            print("File Extension: ", file_extension)
            if file_extension == ".wav" or file_extension == ".mp3":
                list_of_Afiles.append(i)
        self.listviwer(list_of_Afiles)    
    
    def listviwer(self,afilelist):
        """this func getting key of videodic and creating listview with checkbox"""
        global model
        model = QtGui.QStandardItemModel()
        for i in afilelist:
            print(i)
            item = QtGui.QStandardItem(i)
            check = QtCore.Qt.Checked = False
            item.setCheckState(check)
            item.setText(str(i))
            print(item.text()+" lisetview"+" "+str(item.checkState()))
            item.setCheckable(True)
            model.appendRow(item)
            print(model)
        self.listView.setModel(model)                        

    def refreshlistfunc(self):
        self.getaudiolist()

    def getaudiodevices(self):
        print("gettting audio devices")
        p = pyaudio.PyAudio()
        #deviceslist = []
        deviceslist.clear()
        for i in sd.query_devices():
            deviceslist.append(i['name'])
        #print(sd.query_devices(kind='input'))
        self.hearmyselfdevice.addItems(deviceslist)
        for i in range(len(deviceslist)):
            try:
                if sd.query_devices(i,'input')['max_input_channels']>0:
                    #print(sd.query_devices(i,'input')['name'])
                    deviceslistin.append(sd.query_devices(i,'input')['name'])
            except:
                pass
        print(deviceslistin)        
        for i in range(len(deviceslist)):
                
            try:
                if sd.query_devices(i,'output')['max_output_channels']>0:
                    #print(sd.query_devices(i,'output')['name'])
                    deviceslistout.append(sd.query_devices(i,'output')['name'])
            except:
                pass    
        print(deviceslistout)            
        self.inputdevice.addItems(deviceslistin)
        self.outputdevice.addItems(deviceslistout)

    def play_clk(self):
        try:
            self.getcheckditems(model)
            print(selectedaudios)
            selecetedfilepath = selectedaudios[0].replace('\\','/')
            print(selecetedfilepath)
            self.thread4 = playaudio_thread(selecetedfilepath,deviceslist.index(self.outputdevice.currentText()))
            self.thread4.start()
        except Exception as e:
            print(e)  
        #audio.playaudio(selecetedfilepath,deviceslist.index(self.outputdevice.currentText()),1024)
    def stop_clk(self):
        try:
            print(str(sd.get_stream()))
            audio.stopplaying()
            #sd.stop()
            self.thread4.setTerminationEnabled(True)
            self.thread4.terminate()
            sd.default.reset()
        except Exception as e:
            print(e)
                 
    def getcheckditems(self,models):
        selectedaudios.clear()
        for index in range(models.rowCount()):
            item = models.item(index)
            print(str(QtCore.Qt.Checked))
            if item.checkState() != QtCore.Qt.Checked:
                print(item.text()+" getcheck"+" "+str(item.checkState()))
                i = item.text()
                selectedaudios.append(i)
                #selectedvideos.append(item.text()    
        print(selectedaudios)
    
    def setdeviceindexfunc(self,text):
        print(text)
        dtext = selectedoutputdevicetext[0]
        if text in deviceslist:
            dtext = text
            print("index of text"+str(dtext))
        selectedoutputdevicetext[0] = dtext
        self.setsettingvals() 

    def setindeviceindexfunc(self,text):
        print(str(type(deviceslist)))
        dtext = selectedinputdevicetext[0]
        if text in deviceslist:
            dtext = text
            print("index of text"+str(dtext))
        selectedinputdevicetext[0] = dtext
        
        self.setsettingvals()

    def asinghk_clk(self):
        '''hkstr = self.lineEdit.text()
        print(hkstr)
        newhklist =[modifirekeyslist[self.comboBox.currentIndex()],hkstr]
        print(newhklist)
        newhk = newhklist[0]+"+"+newhklist[1]'''
        newhk = self.capturekey_sb_lb.text()
        self.getcheckditems(model)
        hotkeydict[str(newhk)] = selectedaudios[0]
        print(hotkeydict)
        print("save kotkeys in to HDD")
        print(mydir)
        path =  mydir+"/saves"
        if os.path.exists(path)==False:
            print("not exist have to create")  
            os.mkdir(path)
            pickle.dump((hotkeydict),open(path+"/hotkeys"+".dvm","wb"))
            print("saving to "+str(path))
        else:
            pickle.dump((hotkeydict),open(path+"/hotkeys"+".dvm","wb"))
            print("saving to "+str(path))

    def setoverridehearuselfval(self,bval):

        print(bval)
        self.settingval.setValue("overridehearuselfdevice",bval)

    def sethearmyselfdeviceval(self,text):
        print(text)
        self.settingval.setValue("hearmyselfdevice",text)

    def sethearmyselfvolumeval(self):
        self.settingval.setValue("hearmyselfvolume",self.horizontalSlider.value())
        self.sampelrate.setText('hear my self volume '+str(self.horizontalSlider.value()))

    def setoverridesoudboarvolumedval(self,bval):
        print(bval)
        self.settingval.setValue("overridesoundboardvolume",bval)
        overridesoundboardvolume[0] = bval

    def setsoundboardvolumeval(self):
        self.settingval.setValue("soundboardvolume",self.soundboardvolumeslider.value())
        soundboardvolume[0] = self.soundboardvolumeslider.value()

    def getkeyofitem(self,item):
        matchedkey = ''
        for i in hotkeydict.keys():
            if item ==  hotkeydict[i]:
                matchedkey = i
                print(matchedkey)
        return matchedkey        

    def whenchekedlistitem(self):
        try:
            self.getcheckditems(model)
            print(str(self.getkeyofitem(selectedaudios[0])))
            self.hotkeylb.setText(str(self.getkeyofitem(selectedaudios[0])))
        except Exception as e:
            print(e)
    def removehotkey_clk(self):
        try:
            self.getcheckditems(model)
            print(str(self.getkeyofitem(selectedaudios[0])))
            hotkeydict.pop(self.getkeyofitem(selectedaudios[0]))
            path =  mydir+"/saves"
            if os.path.exists(path)==False:
                print("not exist have to create")  
                os.mkdir(path)
                pickle.dump((hotkeydict),open(path+"/hotkeys"+".dvm","wb"))
                print("saving to "+str(path))
            else:
                pickle.dump((hotkeydict),open(path+"/hotkeys"+".dvm","wb"))
                print("saving to "+str(path))
        except Exception as e:
            print(e)

    def settableview(self,dic):
        global tablemodel
        try:
            tablemodel = QtGui.QStandardItemModel()
        
            dic = dic
            print(str(enumerate(dic)))
            tablemodel = TableModel(dic)
            self.tableView.setModel(tablemodel)
        except:
            pass   
        '''for row, col in enumerate(dic):
            print(col)
            rowitem = QtGui.QStandardItem(row)
            colitem = QtGui.QStandardItem(col)
            tablemodel.appendRow(rowitem)
            tablemodel.appendColumn(colitem)
            tablemodel = TableModel(dict)
            self.tableView.setModel(tablemodel)'''
            #self.tableView.setItem(row, col, newitem)

    def showpitchchangersettings(self):

        self.note.show()
        self.pitchval.show()
        self.pitchval_hs.show()
        self.pitch_volume.show()
        self.pitch_volume_hs.show()

    def setpitchvolumeval(self):
        pitchvolume[0] = self.pitch_volume_hs.value()
        self.settingval.setValue("pitchvolume",self.pitch_volume_hs.value())
        self.pitch_volume.setText("Pitch volume "+ str(pitchvolume[0]))

    def setpitchval(self):
        pitch[0] = self.pitchval_hs.value()
        self.settingval.setValue("pitch",self.pitchval_hs.value())
        self.pitch_volume.setText("Pitch "+ str(pitchvolume[0]))

    def getischeckedfromlistwdgt(self,itemstr):
        item = self.voicechangerlist.item(0)
        if item.checkState() != QtCore.Qt.Checked:
            return 2
        else:
            return 0     

    def setlistwidgtitemcheckstate(self,itemstr,state = False):
        item = self.voicechangerlist.findItems(itemstr)
        if state == True:
            item[0].setCheckState(QtCore.Qt.Checked)
        else:
            item[0].setCheckState(QtCore.Qt.Checked(False))

    def applyvoicechanger_clk(self):
        pitchshiftstate = self.getischeckedfromlistwdgt("Pitch Shift")
        if pitchshiftstate  == 2:
            self.settingval.setValue("pitchshift",2)
        else:
            self.settingval.setValue("pitchshift",0)    
            
    def filteraudiofiles_func(self,searchstr):
        self.filteraudiofiles = QtCore.QSortFilterProxyModel()
        self.filteraudiofiles.setSourceModel(model)
        self.filteraudiofiles.setFilterCaseSensitivity(QtCore.Qt.CaseInsensitive)
        self.filteraudiofiles.setFilterRegExp(searchstr)
        self.listView.setModel(self.filteraudiofiles)

    def startcapture_hk_bt_clk(self):

        if self.startcapture_hk_bt.text() == "Start capture hotkey":
            print("start capture")
            self.thread5 = capturehk_thread()
            self.thread5.start()
            self.thread5.setTerminationEnabled(True)
            self.startcapture_hk_bt.setText("Stop chapture")
            self.thread5.capturedhk.connect(self.sethotkeytostop_lb.setText)
        elif self.startcapture_hk_bt.text() == "Stop chapture":
            print("stop capture")
            try:
                self.thread5.terminate()
                self.settingval.setValue("stophotkey",self.sethotkeytostop_lb.text())
                self.startcapture_hk_bt.setText("Start capture hotkey")
            except:
                pass  

    def startcapturekeys_sb_bt_clk(self):
    
        if self.startcapturekeys_sb_bt.text() == "Start capture":
            print("start capture")
            self.thread5 = capturehk_thread()
            self.thread5.start()
            self.thread5.setTerminationEnabled(True)
            self.startcapturekeys_sb_bt.setText("Stop capture")
            self.thread5.capturedhk.connect(self.capturekey_sb_lb.setText)
        elif self.startcapturekeys_sb_bt.text() == "Stop capture":
            print("stop capture")
            self.startcapturekeys_sb_bt.setText("Start capture")
            try:
                self.startcapturekeys_sb_bt.setText("Start capture")
                self.thread5.terminate()
                
                
            except:
                pass        



    def retranslateUi(self, voicemode):
        _translate = QtCore.QCoreApplication.translate
        voicemode.setWindowTitle(_translate("voicemode", "DRAGON VOICE MODE"))
        self.asinghk.setText(_translate("voicemode", "Add Hot Key"))
        '''self.comboBox.setItemText(1, _translate("voicemode", "alt_r"))
        self.comboBox.setItemText(0, _translate("voicemode", "alt_l"))
        self.label.setText(_translate("voicemode", "+"))'''
        self.removehk.setText(_translate("voicemode", "Remove Hot Key"))
        #self.repeat.setText(_translate("voicemode", "repeat"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.soundboard), _translate("voicemode", "Sound Board"))
        self.sampelrate.setText(_translate("voicemode", "hear my self volume"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("voicemode", "voice settings"))
        self.about.setTitle(_translate("voicemode", "Edit"))
        self.openaudiopath.setText(_translate("voicemode", u"open audio files dir", None))
        self.refreshlist.setText(_translate("voicemode", u"Refresh List", None))
        self.play.setText(_translate("voicemode", u"play", None))
        self.stop.setText(_translate("voicemode", u"stop", None))
        self.label_3.setText(_translate("voicemode", u"input", None))
        self.label_4.setText(_translate("voicemode", u"output", None))
        self.label_5.setText(_translate("voicemode", u"select device to hear your self", None))
        self.overridehearuselfdevice.setText(_translate("voicemode", u"override hear your self device", None))
        self.overridesoudboardvolume.setText(_translate("voicemode", u"override sound board volume", None))
        self.showhotkey.setText(_translate("voicemode", u"Show Hotkey", None))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.audiofileview_tb), _translate("voicemode", u"Audio files view", None))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.hotkeysview_tb), _translate("voicemode", u"Hotkeys view", None))
        __sortingEnabled = self.voicechangerlist.isSortingEnabled()
        self.voicechangerlist.setSortingEnabled(False)
        ___qlistwidgetitem = self.voicechangerlist.item(0)
        ___qlistwidgetitem.setText(_translate("voicemode", u"Pitch Shift", None));
        self.voicechangerlist.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.voicechanger_tb), _translate("voicemode", u"voice changer", None))
        self.applyvoicechanger.setText(_translate("voicemode", u"Apply", None))
        self.searchinaudiofiles_lb.setText(_translate("voicemode", u"Search Audio File", None))
        self.sethotkeytostop_lb.setText(_translate("voicemode", u"Set hotkey to stop audio", None))
        self.startcapture_hk_bt.setText(_translate("voicemode", u"Start capture hotkey", None))
        self.startcapturekeys_sb_bt.setText(_translate("voicemode", u"Start capture", None))
        self.capturekey_sb_lb.setText(_translate("voicemode", u"Start capture hot key", None))
        try:    
            self.note.setText(_translate("voicemode", u"still in devolopment", None))
            self.pitchval.setText(_translate("voicemode", u"Pitch", None))
            self.pitch_volume.setText(_translate("voicemode", u"Volume", None))
        except:
            pass    
        #self.label_2.setText(_translate("voicemode", u"TextLabel", None))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    stylef = QFile("style1.css") 
    stylef.open(QFile.ReadOnly | QFile.Text)
    stylesheet = QTextStream(stylef)
    stylesheetstr =stylesheet.readAll()
    print(stylesheetstr)
    app.setStyleSheet(stylesheetstr)
    voicemode = QtWidgets.QMainWindow()
    ui = Ui_voicemode()
    ui.setupUi(voicemode)
    voicemode.show()
    sys.exit(app.exec_())
