# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\mendis\Documents\GitHub\DRAGON-VOICEMODE\voice mode settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSettings
import pickle
import os


global mydir
mydir = os.path.dirname(os.path.realpath(__file__))
global selectedapps
selectedapps = []

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(640, 480)
        self.settingval = QSettings("DragonVoiceMode","settings vals")
        self.enablenitify = QtWidgets.QCheckBox(Dialog)
        self.enablenitify.setGeometry(QtCore.QRect(40, 40, 341, 17))
        self.enablenitify.setObjectName("enablenitify")
        self.enablenitify.setChecked(self.settingval.value("enable notify") == 2)
        self.enablenitify.stateChanged.connect(self.setenablenotify)
        self.enableoverlay = QtWidgets.QCheckBox(Dialog)
        self.enableoverlay.setGeometry(QtCore.QRect(40, 90, 421, 20))
        self.enableoverlay.setObjectName("enableoverlay")
        self.enableoverlay.setChecked(self.settingval.value("overlay enable") == 2)
        self.enableoverlay.stateChanged.connect(self.setenabloverlay)
        self.info = QtWidgets.QPushButton(Dialog)
        self.info.setObjectName(u"info")
        self.info.setGeometry(QtCore.QRect(30, 450, 75, 23))
        self.add_overlay_programs = QtWidgets.QPushButton(Dialog)
        self.add_overlay_programs.setObjectName(u"add_overlay_programs")
        self.add_overlay_programs.setEnabled(True)
        self.add_overlay_programs.setGeometry(QtCore.QRect(40, 130, 131, 23))
        self.listView = QtWidgets.QListView(Dialog)
        self.listView.setObjectName(u"listView")
        self.listView.setGeometry(QtCore.QRect(40, 190, 561, 161))
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName(u"label")
        self.label.setGeometry(QtCore.QRect(50, 160, 551, 21))
        self.showlist()
        self.removeselcetedapp = QtWidgets.QPushButton(Dialog)
        self.removeselcetedapp.setObjectName(u"removeselcetedapp")
        self.removeselcetedapp.setGeometry(QtCore.QRect(490, 360, 111, 23))
        self.removeselcetedapp.clicked.connect(self.removeselected_clk)
        self.refresh = QtWidgets.QPushButton(Dialog)
        self.refresh.setObjectName(u"refresh")
        self.refresh.setGeometry(QtCore.QRect(40, 360, 75, 23))
        self.refresh.clicked.connect(self.refresh_clk)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def setenablenotify(self,stateindex):
        print("notify"+str(stateindex))
        self.settingval.setValue("enable notify",stateindex)

    def setenabloverlay(self,stateindex):
        print("overlay"+str(stateindex))
        self.settingval.setValue("overlay enable",stateindex) 

    def showlist(self):
        try:
            global model
            model = QtGui.QStandardItemModel()
            datainfile = pickle.load(open(mydir+"/"+"saves/overlayapps.dvm","rb")) #read data in file
            for i in datainfile:
                print(i)
                item = QtGui.QStandardItem(i)
                check = QtCore.Qt.Checked = False
                item.setCheckState(check)
                item.setText(str(i))
                print(item.text()+" lisetview"+" "+str(item.checkState()))
                item.setCheckable(True)
                model.appendRow(item)
                print(model)  
            self.listView.setModel(model)          
        except:
            pass
    def getcheckditems(self,models):
        selectedapps.clear()
        for index in range(models.rowCount()):
            item = models.item(index)
            print(str(QtCore.Qt.Checked))
            if item.checkState() != QtCore.Qt.Checked:
                print(item.text()+" getcheck"+" "+str(item.checkState()))
                i = item.text()
                selectedapps.append(i)
                #selectedvideos.append(item.text()    
        print(selectedapps)   

    def removeselected_clk(self):
        self.getcheckditems(model)
        datainfile = pickle.load(open(mydir+"/"+"saves/overlayapps.dvm","rb"))
        for index in range(model.rowCount()):
            print(index)
            try:
                item = model.item(index)
                if item.text() in selectedapps:
                    datainfile.remove(str(item.text()))
                    model.removeRow(index)
            except:
                pass        
                

        path =  mydir+"/saves"
        pickle.dump((datainfile),open(path+"/overlayapps"+".dvm","wb"))
        print("saving to "+str(path))   
        self.showlist()

    def refresh_clk(self):
        self.showlist()



    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Settings"))
        self.enablenitify.setText(_translate("Dialog", "enable notifications"))
        self.enableoverlay.setText(_translate("Dialog", "enable game overlay"))
        self.info.setText(_translate("Dialog", u"Info", None))
        self.add_overlay_programs.setText(_translate("Dialog", u"Add OverLay Programs", None))
        self.label.setText(_translate("Dialog", u"....................................................Overlay enabled programs....................................................", None))
        self.removeselcetedapp.setText(_translate("Dialog", u"Remove Selected", None))
        self.refresh.setText(_translate("Dialog", u"Refresh", None))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
