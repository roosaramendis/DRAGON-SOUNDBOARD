# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\mendis\Documents\GitHub\DRAGON-VOICEMODE\add programs for overlay ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import detect_running_apps
import pickle
import os


global mydir
mydir = os.path.dirname(os.path.realpath(__file__))
global overlayapplist
overlayapplist = []

class Ui_addprogramsforoverlay(object):
    def setupUi(self, addprogramsforoverlay):
        addprogramsforoverlay.setObjectName("addprogramsforoverlay")
        addprogramsforoverlay.resize(846, 322)
        self.listView = QtWidgets.QListView(addprogramsforoverlay)
        self.listView.setGeometry(QtCore.QRect(20, 70, 801, 201))
        self.listView.setObjectName("listView")
        self.lineEdit = QtWidgets.QLineEdit(addprogramsforoverlay)
        self.lineEdit.setGeometry(QtCore.QRect(20, 30, 661, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.textChanged.connect(self.filterapps_func)
        self.label = QtWidgets.QLabel(addprogramsforoverlay)
        self.label.setGeometry(QtCore.QRect(710, 30, 111, 16))
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(addprogramsforoverlay)
        self.pushButton.setGeometry(QtCore.QRect(704, 280, 121, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.add_clk)
        self.showlistview()
        self.retranslateUi(addprogramsforoverlay)
        QtCore.QMetaObject.connectSlotsByName(addprogramsforoverlay)

    def showlistview(self):
        global model
        model = QtGui.QStandardItemModel()
        self.modelfiltered = QtGui.QStandardItemModel()
        for i in detect_running_apps.processlist().getprocess():
            print(i)
            item = QtGui.QStandardItem(i)
            item.setText(str(i))
            model.appendRow(item)
            print(model)
        self.listView.setModel(model)  

    def add_clk(self):

        try:
            datainfile = pickle.load(open(mydir+"/"+"saves/overlayapps.dvm","rb")) #read data in file
            print(datainfile)
            overlayapplist.clear()
            for i in datainfile:
                overlayapplist.append(i)
                

        except:
            pass    

        print(str(self.listView.selectedIndexes()))
        try:
            print(model.itemFromIndex(self.listView.selectedIndexes()[0]).text())
            selecteditem = model.itemFromIndex(self.listView.selectedIndexes()[0]).text()
        except:    
            #selecteditem = self.modelfiltered.item(self.listView.selectedIndexes()[0].row()).text()
            selecteditem = model.itemFromIndex(self.modelfiltered.mapToSource(self.listView.selectedIndexes()[0])).text()
        overlayapplist.append(str(selecteditem))
        
        path =  mydir+"/saves"
        if os.path.exists(path)==False:
            print("not exist have to create")  
            os.mkdir(path)
            pickle.dump((overlayapplist),open(path+"/overlayapps"+".dvm","wb"))
            print("saving to "+str(path))
        else:
            pickle.dump((overlayapplist),open(path+"/overlayapps"+".dvm","wb"))
            print("saving to "+str(path))

    def filterapps_func(self,searchstr):
        self.filteredapps = QtCore.QSortFilterProxyModel()
        self.filteredapps.setSourceModel(model)
        self.filteredapps.setFilterCaseSensitivity(QtCore.Qt.CaseInsensitive)
        self.filteredapps.setFilterRegExp(searchstr)
        #self.filteredapps.mapToSource(self.listView.selectedIndexes()[0])
        self.modelfiltered = self.filteredapps
        #self.listView.setModel(self.filteredapps)
        self.listView.setModel(self.modelfiltered)

    def retranslateUi(self, addprogramsforoverlay):
        _translate = QtCore.QCoreApplication.translate
        addprogramsforoverlay.setWindowTitle(_translate("addprogramsforoverlay", "add programs for overlay"))
        self.label.setText(_translate("addprogramsforoverlay", "Search"))
        self.pushButton.setText(_translate("addprogramsforoverlay", "add"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    addprogramsforoverlay = QtWidgets.QDialog()
    ui = Ui_addprogramsforoverlay()
    ui.setupUi(addprogramsforoverlay)
    addprogramsforoverlay.show()
    sys.exit(app.exec_())
